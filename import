#!/usr/bin/env node
'use strict';

// This script imports the latest code from smogon/pokemon-showdown and generates a workable
// module from it. At a high level, this involves copying files from PS's `sim/` directory (after
// performing some minor modifications) into an existing tree with the correct `package.json` and
// other configuration. Relevant tests are copied as well to ensure integrity of the final package.
// However, the main complications are:
//
//   - internally the simulator relies on global ambient types which work to compile a
//     standalone application but which are useless to downstream developers attempting to use this
//     as a library as part of their own application. As such, we need to mirror and modify the
//     `sim/global-types.ts` file to export all of its types *and* add imports to all of the files
//     under `sim/` (ie. any `.ts` files depending on global types - the `data/` files are
//     currently not required to have ///-references to work).
//   - `sim/dex.ts` has to have its loading reworked to depend on everything up front so that it can
//     be used in a browser environment where synchronous `require`` and `fs` APIs don't exist.
//
// The general steps for updating this package to smogon/pokemon-showdown@HEAD are:
//
//   1. run `./import`, look at which files were changed.
//     a. if `sim/dex.ts` (or another forked file) changed, manually port the changes over
//   2. run `npm test`, ensure everything compiles and all of the copied unit tests pass
//   3. `cd sim && npm version patch` to bump the version
//   4. commit using the provided git commands and message
//   5. `npm publish --access public` from the `sim/` directory to publish `@pkmn/sim`
//
// If any of these steps fail, return the the beginning with `./import` and run through them again.

const child_process = require('child_process');
const fs = require('fs');
const path = require('path');

const stringify = require('json-stringify-pretty-compact');

const exec = async (cmd, cwd = __dirname) => {
  return new Promise(resolve => {
    child_process.exec(cmd, { cwd }, (error, stdout, stderr) => {
      resolve([error ? error.code : 0, stdout, stderr]);
    });
  });
};

const IGNORE_STDERR = true;
const execOrDie = async (cmd, cwd = __dirname, ignoreStderr = !IGNORE_STDERR) => {
  const dir = path.relative(__dirname, cwd);
  console.log(dir ? `${cmd} \x1b[90m(${path.relative(__dirname, cwd)})\x1b[0m` : cmd);
  const [error, stdout, stderr] = await exec(cmd, cwd);
  if (error || (!ignoreStderr && stderr)) throw new Error(`exec error ${error}: ${stderr}`);
  return stdout;
};

const tree = root => {
  const leaves = [];
  for (const child of fs.readdirSync(root)) {
    if (['build', 'node_modules'].includes(child)) continue;
    const p = path.join(root, child);
    leaves.push(...(fs.lstatSync(p).isDirectory() ? tree(p) : [p]));
  }
  return leaves;
};

const replace = async (file, replacements) => {
  const stats = await fs.promises.lstat(file);
  if (stats.isSymbolicLink()) return;
  if (stats.isFile()) {
    if (!file.endsWith('.js')) return;
    let text = await fs.promises.readFile(file, "utf-8");
    let anyMatch = false;
    for (var i = 0; i < replacements.length; i++) {
      anyMatch = anyMatch || text.match(replacements[i].regex);
      if (anyMatch) text = text.replace(replacements[i].regex, replacements[i].replace);
    }
    if (!anyMatch) return;
    await fs.promises.writeFile(file, text);
  } else if (stats.isDirectory()) {
    const files = await fs.promises.readdir(file);
    const all = [];
    for (var i = 0; i < files.length; i++) {
      all.push(replace(path.join(file, files[i]), replacements));
    }
    await Promise.all(all);
  }
};

const ps = path.resolve(__dirname, 'vendor/pokemon-showdown');
const psc = path.resolve(__dirname, 'vendor/pokemon-showdown-client');
const sim = path.resolve(__dirname, 'sim');
const dex = path.resolve(__dirname, 'dex');
const mods = path.resolve(__dirname, 'mods');
const randoms = path.resolve(__dirname, 'randoms');

// fucking hell zarle, friends don't let friends use globals :(
const IMPORTS = {
  'sim/battle-queue.ts': ['Pokemon', 'ID', 'Move', 'Effect', 'AnyObject'],
  'sim/battle-stream.ts': ['AnyObject'],
  'sim/battle.ts': [
    'Effect', 'Format', 'ID', 'PlayerOptions', 'AnyObject', 'ActiveMove', 'SideID',
    'SparseBoostsTable', 'SpreadMoveDamage', 'Move', 'PokemonSet', 'SpreadMoveTargets',
    'HitEffect', 'GameType', 'ModdedDex',
  ],
  'sim/dex-data.ts': [
    'ID', 'EffectData', 'EffectType', 'Nonstandard', 'AnyObject', 'GameTimerSettings',
    'FormatData', 'GameType', 'Battle', 'ConditionData', 'ItemData', 'FlingData', 'AbilityData',
    'MoveSource', 'EventInfo', 'SpeciesData', 'SpeciesFormatsData', 'SpeciesAbility',
    'GenderName', 'StatsTable', 'RandomTeamsTypes', 'MoveData', 'SecondaryEffect', 'MoveTarget',
    'TypeData', 'SparseStatsTable', 'SparseBoostsTable', 'TierTypes',
  ],
  'sim/field.ts': ['Effect', 'Condition', 'Pokemon', 'Battle', 'Side', 'AnyObject', 'ID'],
  'sim/pokemon.ts': [
    'ActiveMove', 'Ability', 'Condition', 'Item', 'Species', 'SparseBoostsTable', 'Side',
    'AnyObject', 'DynamaxOptions', 'Move', 'StatNameExceptHP', 'PokemonModData', 'Effect',
    'StatsExceptHPTable', 'ID', 'BoostsTable', 'StatsTable', 'GenderName', 'PokemonSet', 'Battle',
  ],
  'sim/side.ts': [
    'AnyObject', 'Effect', 'ActiveMove', 'Condition', 'PokemonSet', 'Battle', 'Move', 'SideID',
  ],
  'sim/state.ts': [
    'AnyObject', 'Condition', 'Ability', 'Item', 'Move', 'Species', 'ActiveMove',
  ],
  'sim/team-validator.ts': [
    'Format', 'StatsTable', 'SparseStatsTable', 'Species', 'AnyObject', 'Move',
    'EventInfo', 'PokemonSet', 'Ability', 'Item', 'ID', 'ModdedDex',
  ],
  'sim/tools/random-player-ai.ts': ['AnyObject'],
};
const MOD_IMPORTS = {
  // stadium
  'data/mods/stadium/conditions.ts': ['ModdedConditionData'],
  'data/mods/stadium/moves.ts': ['ModdedMoveData'],
  'data/mods/stadium/rulesets.ts': ['ModdedFormatData'],
  'data/mods/stadium/scripts.ts': [
    'ModdedBattleScriptsData', 'StatNameExceptHP', 'BoostName', 'ActiveMove'
  ],
  // vgc17
  'data/mods/vgc17/formats-data.ts': ['ModdedSpeciesFormatsData'],
  'data/mods/vgc17/items.ts': ['ModdedItemData'],
  'data/mods/vgc17/learnsets.ts': ['ModdedLearnsetData'],
  'data/mods/vgc17/pokedex.ts': ['ModdedSpeciesData'],
  'data/mods/vgc17/rulesets.ts': ['ModdedFormatData'],
  'data/mods/vgc17/scripts.ts': ['ModdedBattleScriptsData'],
  // letsgo
  'data/mods/letsgo/formats-data.ts': ['ModdedSpeciesFormatsData'],
  'data/mods/letsgo/learnsets.ts': ['ModdedLearnsetData'],
  'data/mods/letsgo/moves.ts': ['ModdedMoveData'],
  'data/mods/letsgo/pokedex.ts': ['ModdedSpeciesData'],
  'data/mods/letsgo/scripts.ts': ['ModdedBattleScriptsData', 'StatsTable', 'StatName'],
};

const TYPES = new Set([
  'Normal' , 'Fighting' , 'Flying' , 'Poison' , 'Ground' , 'Rock' , 'Bug' , 'Ghost' , 'Steel' ,
  'Fire' , 'Water' , 'Grass' , 'Electric' , 'Psychic' , 'Ice' , 'Dragon' , 'Dark' , 'Fairy',
]);

const imports = (types, where, typeOnly = false) => {
  types.sort();
  const importStatement = typeOnly ? 'import type' : 'import';
  if (types.length <= 5) return`${importStatement} {${types.join(', ')}} from '${where}';\n\n`;
  return `${importStatement} {\n\t${types.join(',\n\t')},\n} from '${where}';\n\n`;
};

// This is actually in sim/dex.ts and really should be in sim/global-types.ts
const NATURE = `
export interface Nature {
\tname: string;
\tplus?: Exclude<keyof StatsTable, 'hp'>;
\tminus?: Exclude<keyof StatsTable, 'hp'>;
\t[k: string]: any;
}\n`;

// All the files in our sim/ directory, excluding build/ & node_modules/
const FILES = new Set(tree(sim).map(m => m.slice(sim.length + 1)));
const MOD_FILES =
  new Set(tree(path.join(mods, 'src')).map(m => `data/mods/${m.slice(mods.length + 5)}`));

// Files which need special attention if changed (usually manual intervention)
const FRAGILE = new Set([
  'sim/dex-data.ts',
  'sim/dex.ts',
  'sim/global-types.ts',
  'sim/global-variables.d.ts',
]);
// Files which we want to prevent being copied over from PS, either because of modifications or
// because they only exist in the generated package
const OVERRIDDEN = new Set([
  ...Array.from(FRAGILE).slice(1), // sim/dex-data.ts has *not* been overridden
  '.eslintcache',
  '.eslintrc-no-types.json',
  '.eslintrc-types.json',
  '.eslintrc',
  '.tsbuildinfo',
  'data/index.ts',
  'data/mods/gen1/index.ts',
  'data/mods/gen2/index.ts',
  'data/mods/gen3/index.ts',
  'data/mods/gen4/index.ts',
  'data/mods/gen5/index.ts',
  'data/mods/gen6/index.ts',
  'data/mods/gen7/index.ts',
  'sim/exported-global-types.ts',
  'sim/tools/index.ts',
  'package.json',
  'README.md',
  'sim/index.ts',
  'sim/tools/exhaustive-runner.ts',
  'test/main.js',
  'test/sim/misc/statuses.js',
  'tsconfig.json',
  'pnpm-debug.log', // sigh...
  'package-lock.json', // double sigh...
]);
const MOD_OVERRIDDEN = new Set([
  'data/mods/index.ts',
  'data/mods/index.test.ts',
  'data/mods/stadium/index.ts',
  'data/mods/letsgo/index.ts',
  'data/mods/vgc17/index.ts',
]);
// Any file that hasn't been 'OVERRIDDEN' we need to copy over from PS
const COPIED = new Set([...FILES].filter(f => !OVERRIDDEN.has(f)));
const MOD_COPIED = new Set([...MOD_FILES].filter(f => !MOD_OVERRIDDEN.has(f)));

// Files which are relevant for review in smogon/pokemon-showdown-client
const INTERESTING = new Set([
  'data/text.js',
  'js/storage.js',
  'src/battle-choices.ts',
  'src/battle-dex-data.ts',
  'src/battle-dex.ts',
  'src/battle-scene-stub.ts',
  'src/battle-text-parser.ts',
  'src/battle.ts',
]);

// Pretty much all changes within sim/ and data/ are interesting to review, whether copied or not.
// This mostly exists to help detect when *new* files are added which may need to be included
const interesting = f => {
  if (f.startsWith('sim') || f.startsWith('test/sim')) return true;
  if (f.startsWith('data') && !f.endsWith('random-teams.js')) return true;
  return COPIED.has(f) || MOD_COPIED.has(f);
};

const removeFields = (data, fields) => {
  data = JSON.parse(JSON.stringify(data));
  for (const id in data) {
    for (const field of fields) delete data[id][field];
  }
  return data;
};

const RANDBAT_FIELDS = [
  'randomBattleLevel',
  'randomBattleMoves',
  'randomDoubleBattleMoves',
  'randomDoubleBattleLevel',
  'exclusiveMoves',
  'comboMoves',
  'essentialMove',
  'randomSets',
];

const DATA = {
  'abilities.js': code => [
    removeFields(code.Abilities, ['rating']), 'abilities.json', (d, gen, data) => {
      // Pokémon Showdown changed its text inheritance in smogon/pokemon-showdown@ea8f52ce to work
      // independently of its normal `inherit: true` scheme, meaning certain data fields need to be
      // patched to paper over the difference.
      if (gen === 4) {
        d['simple'].desc = data[6]['simple'].desc;
        d['thickfat'].desc = data[8]['thickfat'].desc;
      }
    }
  ],
  'aliases.js': code => [code.Aliases, 'aliases.json'],
  'formats-data.js': code =>
    [removeFields(code.FormatsData, RANDBAT_FIELDS), 'formats-data.json'],
  'items.js': code => [removeFields(code.Items, ['spritenum']), 'items.json'],
  'learnsets.js': code => [code.Learnsets, 'learnsets.json'],
  'moves.js': code => [removeFields(code.Moves, ['contestType']), 'moves.json'],
  'pokedex.js': code => [removeFields(code.Pokedex, ['color', 'heightm']), 'species.json'],
  'typechart.js': code => {
    for (const type1 in code.TypeChart) {
      if (!TYPES.has(type1)) {
        delete code.TypeChart[type1];
      } else if (code.TypeChart[type1]) {
        for (const type2 in code.TypeChart[type1].damageTaken) {
          if (!TYPES.has(type2)) {
            delete code.TypeChart[type1].damageTaken[type2];
          }
        }
      }
    }
    return [code.TypeChart, 'types.json']
  },
};

const RANDBAT_DATA = {
  'abilities.js': code => {
    const abilities = {};
    for (const id in code.Abilities) {
      if ('rating' in code.Abilities[id]) abilities[id] = code.Abilities[id].rating;
    }
    return [abilities, 'abilities.json'];
  },
  'formats-data.js': code => {
    for (const id in code.FormatsData) {
      for (const field of Object.keys(code.FormatsData[id])) {
        if (!RANDBAT_FIELDS.includes(field)) delete code.FormatsData[id][field];
      }
      if (!Object.keys(code.FormatsData[id]).length) delete code.FormatsData[id];
    }
    return [code.FormatsData, 'formats-data.json'];
  }
};

const fillDescs = (text, gen, contents) => {
  for (const id in text) {
    if (!contents[id] && gen === 8) continue;
    const desc = text[id][gen === 8 ? 'desc' : `descGen${gen}`];
    if (desc) {
      contents[id] = contents[id] || {inherit: true};
      contents[id].desc = desc;
    }
    const shortDesc = text[id][gen === 8 ? 'shortDesc' : `shortDescGen${gen}`];
    if (shortDesc) {
      contents[id] = contents[id] || {inherit: true};
      contents[id].shortDesc = shortDesc;
    }
  }

  return contents;
};

const HEAD = async where => (await execOrDie('git rev-parse HEAD', where)).slice(0, 8);
// Figure out what has changed in PS so that we can later filter out just the interesting changes
// A GitHub URL for the diff is added for convenience in the event review is required
const changes = async (where, last, now, repo) => ({
  files: (await execOrDie(`git diff --name-only ${last}..${now}`, where)).trim().split('\n'),
  url: `https://github.com/smogon/${repo}/compare/${last}..${now}`,
});

(async () => {
  const last = { ps: await HEAD(ps), psc: await HEAD(psc) };
  try {
    // `git -C vendor/pokemon-showdown pull origin master` etc works for individual submodules, but
    // this command will update both repositories at once
    await execOrDie('git submodule update --remote --rebase', __dirname, IGNORE_STDERR);
    const now = { ps: await HEAD(ps), psc: await HEAD(psc) };

    const changed = {
      ps: await changes(ps, last.ps, now.ps, 'pokemon-showdown'),
      psc: await changes(psc, last.psc, now.psc, 'pokemon-showdown-client')
    };

    console.log(`\n${changed.ps.url}\n`);
    for (const change of changed.ps.files) {
      let color = 0;
      if (/random|formats-data/.test(change)) {
        color = 95; // magenta
      } else if (interesting(change)) {
        // Even though we copy over `sim/global-types.ts` untouched, any changes to it will have a
        // large effect on whether we're able to build an acceptable package
        color = (FRAGILE.has(change) || change === 'sim/global-types.ts')
          ? 91 // red -> yellow -> lightblue
          : OVERRIDDEN.has(change) ? 93 : 96;
      }
      if (color) console.log(`\x1b[${color}mCHANGED\x1b[0m ${change}`);
    }

    console.log(`\n${changed.psc.url}\n`);
    for (const change of changed.psc.files) {
      if (INTERESTING.has(change)) console.log(`\x1b[96mCHANGED\x1b[0m ${change}`);
    }

    // Copy the files over, generating an 'import' statement for those that need it
    for (const file of COPIED) {
      if (IMPORTS[file]) {
        // Handling arbitrary relative imports is overkill right now, bail
        if (!file.startsWith('sim/')) throw new Error('Unsupported import location');
        const prefix = file.startsWith('sim/tools/') ? '..' : '.';
        const original = fs.readFileSync(path.resolve(ps, file), 'utf8');
        fs.writeFileSync(path.resolve(sim, file),
          `${imports(IMPORTS[file], prefix + '/exported-global-types')}${original}`);
      } else if (file === 'lib/streams.ts') {
        const original = fs.readFileSync(path.resolve(ps, file), 'utf8');
        // double fuck you zarle, AnyObject is a dreadful hack to begin with, feel ashamed
        fs.writeFileSync(path.resolve(sim, file),
          `import {AnyObject} from '../sim/exported-global-types';\n${original}`);
      } else {
        fs.copyFileSync(path.resolve(ps, file), path.resolve(sim, file));
      }
    }

    for (const file of MOD_COPIED) {
      if (MOD_IMPORTS[file]) {
        if (!file.startsWith('data/')) throw new Error('Unsupported import location');
        const original = fs.readFileSync(path.resolve(ps, file), 'utf8');
        fs.writeFileSync(path.resolve(mods, file.replace('data/mods', 'src')),
          `${imports(MOD_IMPORTS[file], '@pkmn/sim', true)}${original}`);
      } else {
        fs.copyFileSync(
          path.resolve(ps, file), path.resolve(mods, file.replace('data/mods', 'src')));
      }
    }

    // The data files are Typescript, so we need to build to convert them to JS before requiring
    await execOrDie(`node build`, ps);

    const TEXT = {
      'abilities.json': require(path.resolve(ps, '.data-dist/text/abilities.js')).AbilitiesText,
      'items.json': require(path.resolve(ps, '.data-dist/text/items.js')).ItemsText,
      'moves.json': require(path.resolve(ps, '.data-dist/text/moves.js')).MovesText,
      // 'species.json': require(path.resolve(ps, '.data-dist/text/pokedex.js')).PokedexText,
    };

    const DEX = {regular: {}, random: {}};
    for (let gen = 8; gen >= 1; gen--) {
      let dir = path.join(ps, '.data-dist');
      if (gen !== 8) dir = path.join(dir, `mods/gen${gen}`);
      for (const file of fs.readdirSync(dir)) {
        let fn = DATA[path.basename(file)];
        if (fn) {
          const [contents, basename, patch] = fn(require(path.resolve(dir, file)));
          DEX.regular[basename] = DEX.regular[basename] || {};
          if (patch) patch(contents, gen, DEX.regular[basename]);
          const text = TEXT[basename];
          DEX.regular[basename][gen] = text ? fillDescs(text, gen, contents) : contents;
        }
        fn = RANDBAT_DATA[path.basename(file)];
        if (fn) {
          const [contents, basename] = fn(require(path.resolve(dir, file)));
          DEX.random[basename] = DEX.random[basename] || {};
          DEX.random[basename][gen] = contents;
        }
      }
    }

    for (const basename in DEX.regular) {
      const data = basename === 'aliases.json' ? DEX.regular[basename][8] : DEX.regular[basename];
      fs.writeFileSync(path.join(dex, 'data', basename), stringify(data));
    }
    for (const basename in DEX.random) {
      const data = basename === 'aliases.json' ? DEX.random[basename][8] : DEX.random[basename];
      fs.writeFileSync(path.join(randoms, 'data', basename), stringify(data));
    }

    // Mirror `sim/global-types.ts` to export all of its types (making it a module). Its possible
    // that ///-references could also be added to the data/ files and *nothing* then relies on
    // ambient declarations, but this hack is the least involved way to get things to work
    const types = fs.readFileSync(path.resolve(ps, 'sim/global-types.ts'), 'utf8');
    fs.writeFileSync(path.resolve(sim, 'sim/global-types.ts'), types);
    const exported = [];
    for (const line of types.split('\n')) {
      exported.push(/^(type|interface|namespace)/.test(line) ? `export ${line}` : line);
    }
    fs.writeFileSync(
      path.resolve(sim, 'sim/exported-global-types.ts'),
      `${exported.join('\n')}${NATURE}`
    );

    // The test files require paths are made with PS's build layout in mind - correct that here
    await replace(path.join(sim, 'test'), [
      { regex: new RegExp(`(require\\\(.*?)(.sim-dist)(.*?\\\))`, 'g'), replace: `$1build/sim$3` },
    ]);

    const messages =
      `-m "Import smogon/pokemon-showdown@${now.ps}" ` +
      `-m "smogon/pokemon-showdown-client@${now.psc}"`;
    console.log(`\ngit add -A && git commit ${messages}`);
  } catch (err) {
    await execOrDie(`git reset --hard ${last.ps}`, ps);
    await execOrDie(`git reset --hard ${last.psc}`, psc);
    console.error(err);
    process.exit(1);
  }
})().catch(err => {
  console.log(err);
  process.exit(2);
});
