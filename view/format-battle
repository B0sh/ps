#!/usr/bin/env node
'use strict';

try {
  require('source-map-support').install();
} catch (err) {
  if (err.code !== 'MODULE_NOT_FOUND') throw err;
}

const packages = [];
for (const dep of ['@pkmn/dex']) {
  try {
    require.resolve(dep);
  } catch (err) {
    if (err.code !== 'MODULE_NOT_FOUND') throw err;
    packages.push(dep);
  }
}
if (packages.length) {
  require('child_process').execSync(`npm install ${packages.join(' ')} --no-audit --no-save `, {
    stdio: 'inherit',
    cwd: __dirname,
  });
}

const readline = require('readline');

const {Battle} = require('@pkmn/client');
const {Dex} = require('@pkmn/dex');
const {Protocol} = require('@pkmn/protocol');

const {LogFormatter} = require('./build');

const battle = new Battle(Dex);
const formatter = new LogFormatter(process.argv[2] ? 1 : 0, battle);

readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  terminal: false
}).on('line', line => {
  const {args, kwArgs} = Protocol.parseBattleLine(line);
  const formatted = formatter.formatText(args, kwArgs);
  if (formatted) process.stdout.write(formatted);
  battle.add(args, kwArgs);
});

