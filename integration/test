#!/usr/bin/env node
'use strict';

const child_process = require('child_process');
const path = require('path');

// TODO: WIP process!
// 1. run exhaustive 1 step on PS stack, save log, run log through PS client, save log
// 2. run exhaustive 1 step on PKMN stack, save log (COMPARE TO PS), run log through PKMN (COMPARE)

const minimist = require('minimist');

const sim = require('@pkmn/sim');
const client = require('@pkmn/client');

const shell = (cmd, cwd = __dirname) => child_process.execSync(cmd, { stdio: 'inherit', cwd });
shell('node build', path.resolve(__dirname, '../vendor/pokemon-showdown'));
shell('node build indexes', path.resolve(__dirname, '../vendor/pokemon-showdown-client'));

const simdist = '../vendor/pokemon-showdown/.sim-dist';
const PS = {
  Dex: require(`${simdist}/dex`).Dex,
  ExhaustiveRunner: require(`${simdist}/tools/exhaustive-runner`).ExhaustiveRunner,
};
global.toID = PS.Dex.getId;
PS.Dex.includeModData();

// Tracks whether some promises threw errors that weren't caught so we can log
// and exit with a non-zero status to fail any tests. This "shouldn't happen"
// because we're "great at propagating promises (TM)", but better safe than sorry.
const RejectionTracker = new class {
  constructor() {
    this.unhandled = [];
  }

  onUnhandledRejection(reason, promise) {
    this.unhandled.push({ reason, promise });
  }

  onRejectionHandled(promise) {
    this.unhandled.splice(this.unhandled.findIndex(u => u.promise === promise), 1);
  }

  onExit(code) {
    let i = 0;
    for (const u of this.unhandled) {
      const error = (u.reason instanceof Error) ? u.reason :
        new Error(`Promise rejected with value: ${u.reason}`);
      console.error(`UNHANDLED PROMISE REJECTION:\n${error.stack}`);
      i++;
    }
    process.exit(code + i);
  }

  register() {
    process.on('unhandledRejection', (r, p) => this.onUnhandledRejection(r, p));
    process.on('rejectionHandled', p => this.onRejectionHandled(p));
    process.on('exit', c => this.onExit(c));
  }
}();

RejectionTracker.register();

const argv = minimist(process.argv.slice(2));
let formats;
if (argv.formats) {
  formats = argv.formats.split(',');
} else if (argv.format) {
  formats = argv.format.split(',');
} else {
  formats = ExhaustiveRunner.FORMATS;
}
let cycles = Number(argv._[1] || argv.cycles) || ExhaustiveRunner.DEFAULT_CYCLES;
let forever = argv.forever;
if (cycles < 0) {
  cycles = -cycles;
  forever = true;
}
const maxFailures =
  argv.maxFailures || argv.failures || (formats.length > 1 ? ExhaustiveRunner.MAX_FAILURES : 1);
const prng = argv.seed && argv.seed.split(',').map(s => Number(s));
(async () => {
  let failures = 0;
  do {
    for (let format of formats) {
      failures += await new ExhaustiveRunner({
        format, cycles, prng, maxFailures, log: true, dual: argv.dual,
      }).run();
      process.stdout.write('\n');
      if (failures >= maxFailures) break;
    }
  } while (forever); // eslint-disable-line no-unmodified-loop-condition
  process.exit(failures);
})();
