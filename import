#!/usr/bin/env node
'use strict';

const child_process = require('child_process');
const fs = require('fs');
const path = require('path');

const exec = async (cmd, cwd = __dirname) => {
  return new Promise(resolve => {
    child_process.exec(cmd, {cwd}, (error, stdout, stderr) => {
      resolve([error ? error.code : 0, stdout, stderr]);
    });
  });
};

const execOrDie = async (cmd, cwd = __dirname) => {
  console.log(cmd);
  const [error, stdout, stderr ]= await exec(cmd, cwd);
  if (error || stderr) {
    console.error(stderr);
    process.exit(error);
  }
  return stdout;
};

const tree = root => {
  const leaves = [];
  for (const child of fs.readdirSync(root)) {
    if (['build', 'node_modules'].includes(child)) continue;
    const p = path.join(root, child);
    leaves.push(...(fs.lstatSync(p).isDirectory() ? tree(p) : [p]));
  }
  return leaves;
};

const replace = async (file, replacements) => {
	const stats = await fs.promises.lstat(file);
	if (stats.isSymbolicLink()) return;
	if (stats.isFile()) {
    if (!file.endsWith('.js')) return;
    let text = await fs.promises.readFile(file, "utf-8");
    let anyMatch = false;
    for (var i = 0; i < replacements.length; i++) {
      anyMatch = anyMatch || text.match(replacements[i].regex);
      if (anyMatch) text = text.replace(replacements[i].regex, replacements[i].replace);
    }
    if (!anyMatch) return;
    await fs.promises.writeFile(file, text);
  } else if (stats.isDirectory()) {
    const files = await fs.promises.readdir(file);
    const all = [];
    for (var i = 0; i < files.length; i++) {
      all.push(replace(path.join(file, files[i]), replacements));
    }
    await Promise.all(all);
  }
};

const HEAD = path.resolve(__dirname, 'HEAD');
const submodule = path.resolve(__dirname, 'vendor/pokemon-showdown');
const sim = path.resolve(__dirname, 'sim');
const data = path.resolve(__dirname, 'data');

const FILES = new Set(tree(sim).map(m => m.slice(sim.length + 1)));
const FRAGILE = new Set([
  'sim/dex.ts',
  'sim/global-types.ts',
  'sim/global-variables.d.ts',
])
const OVERRIDDEN = new Set([
  ...FRAGILE,
  'package.json',
  'README.md',
  'sim/index.ts',
  'test/main.js',
  'tsconfig.json',
  'data/index.ts',
  'data/mods/gen1/index.ts',
  'data/mods/gen2/index.ts',
  'data/mods/gen3/index.ts',
  'data/mods/gen4/index.ts',
  'data/mods/gen5/index.ts',
  'data/mods/gen6/index.ts',
  'data/mods/gen7/index.ts',
  'test/sim/misc/statuses.js',
]);
const COPIED = new Set([...FILES].filter(f => !OVERRIDDEN.has(f)));

const interesting = f => {
  if (f.startsWith('sim') || f.startsWith('test/sim')) return true;
  if (f.startsWith('data') && !f.endsWith('random-teams.js')) return true;
  return COPIED.has(f);
}

(async () => {
  await execOrDie('git submodule update --remote --rebase');
  const now = (await execOrDie('git rev-parse HEAD', submodule)).slice(0, 8);
  const last = fs.readFileSync(HEAD, 'utf-8').trim();

  const changed = (await execOrDie(`git diff --name-only ${last}..${now}`, submodule)).split
  ('\n');
  console.log(`https://github.com/smogon/pokemon-showdown/compare/${last}..${now}`);
  for (const change of changed) {
    if (!change) continue;
    if (interesting(change)) {
      const color = FRAGILE.has(change) ? 91 : 93;
      console.log(`\x1b[${color}mCHANGED\x1b[0m ${change}`);
    }
  }

  for (const file of COPIED) {
    fs.copyFileSync(path.resolve(submodule, file), path.resolve(sim, file));
  }

  await replace(path.join(sim, 'test'), [
    {regex: new RegExp(`(require\\\(.*?)(.sim-dist)(.*?\\\))`, 'g'), replace: `$1build/sim$3`},
  ]);

  fs.writeFileSync(HEAD, now);
})().catch(console.error);